Every miner who can and will exchange blockchains must listen to the MQTT channel "blockexchange".

For this example, Alice wants to get info about some blocks from Bob.
First, Alice sends a "who is online?" message to "blockexchange".
At this time, she remains anonymous.

	{"action": "ping"}

Other miners, including Bob, send back messages containing their own public key.
In all interactions, the public key is PEM-encoded.

	{"action": "ping_response",
	"public key": "Bob's public key"}

Once Alice has chosen whom to interact with, she sends a message containing a "meet-me" channel's name to "blockexchange", as well as a session key. The session key is encrypted with Bob's public key, and then represented as Base-64 data. 

	{"action": "meet_me",
	"public_key": "Bob's public key",
	"channel_name": "meet-me/at-the-beach",
	"session_key": "c2VlY3JldCBzZXNzaW9uIGtleQ=="}

All the JSON messages from now on are actually encrypted with AES (in EAX mode) with the session key.

Alice must now be subscribed to the channel name she chose, and once Bob also subscribes, she can check it by sending ping messages:

	{"action": "ping",
	"message": "Any random string may go here (and thus this protocol can be used for chat messages)",
	"initiator": true}

...and waiting for his response, which contains the hash of the message he received:

	{"action": "ping_response",
	"message_hash": "sha256 of the message field in hex",
	"initiator": false}

(Bob can of course send these same messages, just switching the "initiator" field around. Its purpose is to detect messages that have been sent by the same process.

Now Alice can query Bob's stored blockchain. First she will ask Bob about the latest block he knows about:

	{"action": "query_blockchain_length",
	"initiator": true}

Bob will then tell her about his blockchain length, which is equal to the ID of the last valid block.

	{"action": "answer_blockchain_length",
	"length": 9001,
	"initiator": false}

Alice sees that her blockchain is shorter, and tells Bob as such:

	{"action": "compare_blockchain_length",
	"blockchains_equal": false,
	"my_blockchain_shorter": true,
	"initiator": true}

(If Alice's blockchain had actually been longer, the "my_blockchain_shorter" field would be false, prompting Bob to start querying Alice -- which he can do while the connection is open.)

Now Alice asks Bob about blocks. For each block she needs to know about, she sends: 

	{"action": "query_block", 
	"block_id": 9001,
	"initiator": true}

And Bob replies with the block that Alice had requested:

	{"action": "reply_block",
	"block": {"id":9001, ...other block fields...},
	"initiator": false}

In the event that Bob does not know about this block, he will instead send an error message:

	{"action": "reply_block_error",
	"block_id": 9002,
	"error_message": "this block does not exist",
	"initiator": false} 

Once Alice has heard everything she needs to hear, or Bob has decided to stop talking with Alice, either party must send a termination message.

	{"action": "close_session",
	"initiator": true/false}

Once this message has been sent by either party, both of them may unsubscribe from the topic. At this time, the session key becomes invalid, and no new messages should be sent into the topic. (If one side of the communication has hung up, it is the responsibility of the other side to properly timeout and disconnect, as the MQTT protocol allows for a limited number of Will messages to be assigned to a single client, making them unsuitable for signalling session termination.)
